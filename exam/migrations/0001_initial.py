# Generated by Django 4.2.5 on 2023-10-01 17:31

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import exam.services


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='RegularUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=100, unique=True, validators=[django.core.validators.RegexValidator('^(PRP|prp)[1-9]{2}[A-Z]{2}[0-9]{3}$')])),
                ('department', models.CharField(max_length=150)),
                ('semester', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='Value must be between 1 and 8'), django.core.validators.MaxValueValidator(8, message='Value must be between 1 and 8')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'exam_RegularUser',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DifficultyLevel',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('difficulty_level', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, unique=True)),
                ('exam_id', models.CharField(max_length=6, unique=True)),
                ('exam_name', models.CharField(max_length=150)),
                ('duration', exam.services.CustomDuration()),
                ('instructions', models.TextField()),
                ('total_marks', models.PositiveIntegerField()),
                ('qualify_score', models.PositiveIntegerField()),
                ('is_active', models.BooleanField(default=True, help_text='Make Sure to Set Active-state while creating.')),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('slug_exam', models.SlugField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('question_type', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='UserResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_id', models.CharField(max_length=50)),
                ('response', models.JSONField(default=dict)),
                ('marks_scored', models.CharField(default='00', max_length=4)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='userresponse', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchased_exams', models.ManyToManyField(blank=True, related_name='purchased_exams', to='exam.exam')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Questions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, unique=True)),
                ('questions_text', models.TextField(blank=True, null=True)),
                ('questions_image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('optionA_text', models.TextField(blank=True, null=True)),
                ('optionA_image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('optionB_text', models.TextField(blank=True, null=True)),
                ('optionB_image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('optionC_text', models.TextField(blank=True, null=True)),
                ('optionC_image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('optionD_text', models.TextField(blank=True, null=True)),
                ('optionD_image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('answer', models.CharField(choices=[('A', 'optionA'), ('B', 'optionB'), ('C', 'optionC'), ('D', 'optionD')], max_length=1)),
                ('solution_text', models.TextField(blank=True, editable=False, null=True)),
                ('solution_image', models.ImageField(blank=True, editable=False, null=True, upload_to='images/')),
                ('difficulty_level', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='exam.difficultylevel')),
                ('question_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='exam.questiontype')),
            ],
        ),
        migrations.CreateModel(
            name='PurchasedDate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_purchase', models.DateTimeField(default=django.utils.timezone.now)),
                ('expiration_date', models.DateTimeField()),
                ('exam', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='purchased_dates', to='exam.exam')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchased_dates', to='exam.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Otp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.CharField(blank=True, max_length=6, null=True)),
                ('otp_validated', models.BooleanField(blank=True, default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='exam',
            name='questions',
            field=models.ManyToManyField(blank=True, related_name='questions', to='exam.questions'),
        ),
    ]
